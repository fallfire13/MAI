<HTML>
<HEAD>
<TITLE>Понимание SQL. Глава 23. Глобальные аспекты SQL. [SQL.RU]</TITLE>
<META http-equiv="Content-Type" CONTENT="text/html; charset=windows-1251">
<META HTTP-EQUIV="Window-target" CONTENT="_top">
<META HTTP-EQUIV="Last-Modified" CONTENT="29-03-2001">
<META NAME="Description" CONTENT="Использование языка SQL, создание клиент-серверных систем. Конференция по MSSQL, Oracle, Interbase, MySQL. Полезные ссылки, документация, рекомендации по разработке информационных систем, сертификация, заказ книг и многое другое.">
<META NAME="Keywords" CONTENT="SQL, конференция, Database Server, Oracle, Interbase, MySQL, документация, статьи, примеры, книги, ссылки, сертификация, работа, СУБД">
<LINK REL=STYLESHEET TYPE="text/css" HREF="../../../form.css" tppabs="http://www.sql.ru/form.css">
</HEAD>
<BODY BGCOLOR="#FFFFFF" leftmargin="3" topmargin="3" marginheight="3" marginwidth="3">
<noindex>
<TABLE BGCOLOR="#000000" WIDTH=100% CELLPADDING=0 CELLSPACING=0 BORDER=0>
<TR><TD>

<TABLE WIDTH=100% CELLPADDING=0 CELLSPACING=1 BORDER=0>
<TR BGCOLOR="#6699CC"><TD><TABLE CELLSPACING=0 CELLPADDING=0 WIDTH=100% BORDER=0 BGCOLOR="#6699CC">
<TR><TD COLSPAN=3><IMG SRC="../../../images/blank.gif" tppabs="http://www.sql.ru/images/blank.gif" height=3 width=1 alt=""></TD></TR>
<TR><TD VALIGN=TOP>&nbsp;<FONT FACE="Verdana,Arial" SIZE=5 COLOR=lightyellow>SQL.RU<BR><FONT SIZE=-5>&nbsp;client/server technologies</FONT></FONT><!--begin of Top100--><a href="javascript:if(confirm('http://top100.rambler.ru/top100/  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://top100.rambler.ru/top100/'" tppabs="http://top100.rambler.ru/top100/"><img src="../../../../counter.rambler.ru/top100.cnt-236431.gif" tppabs="http://counter.rambler.ru/top100.cnt?236431" alt="Rambler's Top100" width=1 height=1 border=0></a><!--end of Top100 code--></TD>
<TD WIDTH=468 HEIGHT=60 BGCOLOR=#6699CC ALIGN=RIGHT></TD>
<TD WIDTH=2><IMG SRC="../../../images/blank.gif" tppabs="http://www.sql.ru/images/blank.gif" height=1 width=2 alt=""></TD></TR>                                                      	
<TR HEIGHT=4><TD COLSPAN=3><IMG SRC="../../../images/blank.gif" tppabs="http://www.sql.ru/images/blank.gif" height=5 width=1 alt=""></TD></TR></TABLE>

</TD></TR>

<TR HEIGHT=15><TD bgcolor=#006699><FONT FACE="Verdana,Arial" SIZE=1 COLOR=WHITE><B><A CLASS="menu" 
HREF="javascript:if(confirm('http://www.sql.ru/  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.sql.ru/'" tppabs="http://www.sql.ru/">&nbsp;<FONT COLOR=white>Главная</FONT>&nbsp;</A>|<A CLASS="menu" 
HREF="javascript:if(confirm('http://www.sql.ru/docs  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.sql.ru/docs'" tppabs="http://www.sql.ru/docs">&nbsp;<FONT COLOR=yellow>Документация</FONT>&nbsp;</A>|<A CLASS="menu" 
HREF="javascript:if(confirm('http://www.sql.ru/articles  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.sql.ru/articles'" tppabs="http://www.sql.ru/articles">&nbsp;<FONT COLOR=white>Статьи</FONT>&nbsp;</A>|<A CLASS="menu" 
HREF="javascript:if(confirm('http://www.sql.ru/books  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.sql.ru/books'" tppabs="http://www.sql.ru/books">&nbsp;<FONT COLOR=white>Книги</FONT>&nbsp;</A>|<A CLASS="menu" 
HREF="javascript:if(confirm('http://www.sql.ru/forum/actualforum.aspx  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.sql.ru/forum/actualforum.aspx'" tppabs="http://www.sql.ru/forum/actualforum.aspx">&nbsp;<FONT COLOR=white>Форум</FONT>&nbsp;</A>|<A CLASS="menu" 
HREF="javascript:if(confirm('http://www.sql.ru/poll  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.sql.ru/poll'" tppabs="http://www.sql.ru/poll">&nbsp;<FONT COLOR=white>Опросы</FONT>&nbsp;</A>|<A CLASS="menu" 
HREF="javascript:if(confirm('http://www.sql.ru/forum/actualtopics.aspx?bid=11  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.sql.ru/forum/actualtopics.aspx?bid=11'" tppabs="http://www.sql.ru/forum/actualtopics.aspx?bid=11">&nbsp;<FONT COLOR=white>Гостевая</FONT>&nbsp;</A>|<A CLASS="menu"
HREF="javascript:if(confirm('http://www.sql.ru/subscribe  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.sql.ru/subscribe'" tppabs="http://www.sql.ru/subscribe">&nbsp;<FONT COLOR=white>Рассылка</FONT>&nbsp;</A>|<A CLASS="menu"
HREF="javascript:if(confirm('http://www.sql.ru/job  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.sql.ru/job'" tppabs="http://www.sql.ru/job">&nbsp;<FONT COLOR=white>Работа</FONT>&nbsp;</A>|<A CLASS="menu"
HREF="javascript:if(confirm('http://www.sql.ru/search  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.sql.ru/search'" tppabs="http://www.sql.ru/search">&nbsp;<FONT COLOR=white>Поиск</FONT>&nbsp;</A>|<A CLASS="menu"
HREF="javascript:if(confirm('http://www.sql.ru/faq  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.sql.ru/faq'" tppabs="http://www.sql.ru/faq">&nbsp;<FONT COLOR=white>FAQ</FONT>&nbsp;</A>|</B></FONT></TD></TR>
<TR><TD BGCOLOR=#F5F5F5>
</noindex>

<TABLE BORDER=0 CELLSPACING=10><TR><TD>
<CENTER>
<H2 class="headline">
23. ГЛОБАЛЬНЫЕ АСПЕКТЫ SQL</H2></CENTER>Эта глава будет обсуждать аспекты языка SQL 
которые имеют отношение к базе данных как к единому целому, включая использование многочисленных имен для объектов данных, размещение запоминаемых данных, восстановление и сохранение изменений в базе данных а также координирование одновременных действий многочисленных пользователей. Этот материал даст вам возможность конфигурации вашей базы данных, отмены действия ошибок, и определения как действия одного пользователя в базе данных будут влить на действия других пользователей. 
 <A name=23.1>
<H3>ПЕРЕИМЕНОВАНИЕ ТАБЛИЦ</H3> 
Каждый раз, когда вы ссылаетесь в команде к базовой таблице или представлению не являющимися вашей собственностью, вы должны установить в ней префикс имени владельца, так что бы SQL знала где ее искать. Так как это со временем становится неудобным, большинство реализаций SQL позволяют вам создавать синонимы для таблиц ( что не является стандартом ANSI ) Синоним - это альтернативное им, наподобие прозвища, для таблицы. Когда вы создаете синоним, вы становитесь его собственником, так что нет никакой необходимости, чтобы он предшествовал другому пользовательскому идентификатору доступа( имени пользователя ) Если вы имеете по крайней мере одну привилегию в одном или более столбцах таблицы; вы можете создать для них синоним. ( Некоторое отношение к этому может иметь специальна привилегия для создания синонимов.) 
<BR><BR> 
Adrian может создать синоним с именем Clients, для таблицы с именем Diane.Customers, с помощью команды CREATE SYNONYM следующим образом: 
<PRE> 
      CREATE SYNONYM Clients FOR Diane.Customers; 
</PRE> 
Теперь, Adrian может использовать таблицу с именем Clients в команде 
точно так же как ее использует Diane.Customers. Синоним Clients - это 
собственность, используемая исключительно для Adrian. 
 <A name=23.2>
<H3>ПЕРЕИМЕНОВАНИЕ С ТЕМ ЖЕ САМЫМ ИМЕНЕМ</H3>Префикс (прозвище) пользователя - это фактически часть имени любой 
таблицы. Всякий раз, когда вы не указываете ваше собственное им 
пользователя вместе с именем вашей собственной таблицы, SQL сам заполняет для вас это место. Следовательно, два одинаковых имени таблицы но связанные с различными владельцами, становятся не идентичными и следовательно не приводят к какому-нибудь беспорядку ( по крайней мере в SQL ).  Это означает что два пользователя могут создать две полностью несвязанные таблицы с одинаковыми именами, но это также будет означать, что один пользователь может создать представление основанное на имени другого пользователя стоящем после имени таблицы. 
Это иногда делается когда представление, рассматривается как сама таблица - например, если представление просто использует CHECK OPTION 
как заменитель ограничения CHECK в базовой таблице( смотрите 
<A href="ch22.shtml.htm" tppabs="http://www.sql.ru/docs/sql/u_sql/ch22.shtml">Главу 22</A> для подробностей ).  Вы можете также создавать ваши собственные синонимы, имена которых будут такими же что и первоначальные 
имена таблиц. Например, Adrian может определить Customers, как свой 
синоним для таблицы Diane.Customers : 
<PRE> 
 CREATE SYNONYM Customers FOR Diane.Customers; 
</PRE> 
С точки зрения SQL, теперь имеются два разных имени одной таблицы: 
Diane.Customers и Adrian.Customers.  Однако, каждый из этих пользователей может ссылаться к этой таблице просто как к Customers, 
SQL как говорилось выше сам добавит к ней недостающие имена пользователей. 
 <A name=23.3>
<H3>ОДНО ИМЯ ДЛЯ КАЖДОГО</H3> 
 
Если вы планируете иметь таблицу Заказчиков используемую большим 
числом пользователей, лучше всего что бы они ссылались к ней с помощью одного и того же имени. Это даст вам возможность, например, использовать это им в вашем внутреннем общении без ограничений. 
Чтобы создать единое им для всех пользователей, вы создаете общий 
синоним. Например, если все пользователи будут вызывать таблицу 
Заказчиков с именем Customers, вы можете ввести 
<PRE> 
  CREATE PUBLIC SYNONYM Customers FOR Customers; 
</PRE> 
Мы пронимаем, что таблица Заказчиков это ваша собственность, поэтому 
никакого префикса имени пользователя в этой команды не указывается. 
В основном, общие синонимы создаются владельцами объектов или привилегированными пользователями, типа DBA. Пользователям кроме того, 
 должны еще быть предоставлены привилегии в таблице Заказчиков что- 
бы они могли иметь к ней доступ. Даже если им является общим, сама 
таблица общей не является. Общие синонимы становятся собственными 
с помощью команды PUBLIC, а не с помощью их создателей. 
 <A name=23.4>
<H3>УДАЛЕНИЕ СИНОНИМОВ</H3>Общие и другие синонимы могут удаляться командой DROP SYNONYM. 
Синонимы удаляются их владельцами, кроме общих синонимов, которые 
удаляются соответствующими привилегированными личностями, обычно 
DBA. Чтобы удалить например синоним Clients, когда вместо него уже 
появился общий синоним Customers, Adrian может ввести 
<PRE> 
           DROP SYNONYM Clients; 
</PRE> 
Сама таблица Заказчиков, естественно, становится не эффективной. 
 <A name=23.5>
<H3>КАК БАЗА ДАННЫХ РАСПРЕДЕЛЕНА ДЛЯ ПОЛЬЗОВАТЕЛЕЙ ?</H3>Таблицы и другие объекты данных сохраняются в базе данных и находятся там связанными с определенными пользователями которые ими владеют.   В некотором смысле, вы могли бы сказать, что они сохраняются 
в " именной области пользователя ", хотя это никак не отражает их физического расположения, но зато, как и большинство вещей в SQL, находятся в строгой логической конструкции. Однако, на самом деле, объекты данных сохраняться, в физическом смысле, и  количество памяти 
которое может использоваться определенным объектом или пользователем, в данное врем, имеют свой предел. 
  В конце концов, никакой компьютер не имеет прямого доступа к бесконечному числу аппаратных средств ( диску, ленте, или внутренней памяти) для хранения данных. Кроме того, эффективность SQL расширится если логическая структура данных будет отображаться неким физическим 
способом при котором эти команды получать преимущество. 
   В больших SQL системах, база данных будет разделена на области, так 
называемые Области Базы Данных или Разделы. 
 Это области сохраняемой информации, которые размещены так, чтобы 
информация внутри них находилась близко друг к другу для выполнения 
команд; то есть программа не должна искать где-то далеко информацию, 
сгруппированную в одиночной области базы данных. Хотя ее физические 
возможности зависят от  аппаратного оборудования, целесообразно чтобы 
команда работала в этих областях внутри самой SQL. 
Системы которые используют области базы данных ( в дальнейшем называемых  -  DBS (Data Base Spaces)), позволяют вам с помощью команд 
SQL обрабатывать эти области как объекты. 
<BR><BR> 
DBS создаются командами CREATE DBSPACE (СОЗДАТЬ DBS), 
ACQUIRE DBSPACE(ПОЛУЧИТЬ DBS) или CREATE TABLE- 
SPACE (СОЗДАТЬ ТАБЛИЧНУЮ ОБЛАСТЬ), в зависимости от используемой реализации. Одна DBS может вмещать любое число пользователей, и отдельный пользователь может иметь доступ к многим DBS. Привилегия создавать таблицы, хотя и может быть передана по всей базу данных, 
часто передается в конкретной DBS. 
Мы можем создать DBS с именем Sampletables, следующей командой: 
<PRE> 
           CREATE DBSPACE Sampletables 
              ( pctindex 10, 
                pctfree  25); 
</PRE> 
Параметр pctindex определяет какой процент DBS должен быть оставлен, 
чтобы сохранять в нем индексы таблиц. Pctfree - это процент DBS который 
оставлен чтобы позволить таблицам расширять размеры их строк ( ALTER 
TABLE  может добавлять столбцы или увеличивать размер столбцов, дела 
каждую строку длиннее. Это - расширение памяти отводимой для этого). 
Имеются также другие параметры которые вы также можете определять, 
и которые меняются от программы к программе. Большинство программ 
автоматически будут обеспечивать значения по умолчанию, поэтому вы 
можете создавать DBS не определяя эти параметры. 
DBS может иметь или определенное ограничение размера, или ей может 
быть позволено расти неограниченно вместе с таблицами. 
Если DBS создалась, пользователям предоставляются права создавать в 
ней объекты. Вы можете например предоставить Diane право создать таблицу Sampletables с помощью следующей команды: 
<PRE> 
     GRANT RESOURCE ON Sampletables TO Diane; 
</PRE> 
 Это даст вам возможность более конкретно определять место хранени 
данных. Первый DBS назначаемый данному пользователю - обычно тот, 
где все объекты этого пользователя создаются по умолчанию. 
Пользователи имеющие доступ к многочисленным DBS могут определить, 
где они хотят разместить определенный объект. 
При разделении вашей базы данных на DBSы, вы должны иметь в виду 
типы операций, которые вы будете часто выполнять. Таблицы которые, 
как вам уже известно, будут часто объединяться, или которые имеют 
одну таблицу ссылающуюся на другую во внешнем ключе, должны находиться вместе в одной DBS. 
<BR><BR> 
Например, вы могли бы сообщить при назначении типовых таблиц, что 
таблица Порядков будет часто объединяться с одной или обеими из двух 
других таблиц,, так как таблица Порядков использует значения из обеих 
этих таблиц. При прочих равных условиях, эти три таблицы должны входить в ту же самую область DBS, независимо от того, кто их владелец. 
Возможное присутствие ограничения внешнего ключа в таблице Порядков, просто приведет к более строгому совместному использованию области DBS. 
<A name=23.6>
<H3>КОГДА СДЕЛАННЫЕ ИЗМЕНЕНИЯ СТАНОВЯТСЯ ПОСТОЯННЫМИ ?</H3>  
 
Визуально, среда базы данных, это картина которая постоянно отображает 
для существующих пользователей, постоянно вводимые и изменяемые данные, допуская, что если система правильно разработана, она будет функционировать без сбоев. Однако реально, благодаря человеческим или компьютерным сбоям, ошибки время от времени случаются, и поэтому хорошие компьютерные программы стали применять способы отмены действий вызвавших такие ошибки. 
Команда SQL, которая воздействует на содержание или структуру базы 
данных - например команда модификации DML или команда DROP TABLE, 
- не обязательно будет необратимой. Вы можете определить после окончания ее действия, останутся ли изменения сделанные данной командой или 
группой команд постоянными в базы данных, или они будут полностью 
проигнорированы.  С этой целью, команды обрабатываются группами, называемыми - транзакциями. 
Транзакция начинается всякий раз, когда вы начинаете сеанс с SQL. Все 
команды которые вы введете будут частью этой транзакции, пока вы не за- 
вершите их вводом команды COMMIT WORK или команды ROLLBACK 
WORK. COMMIT может сделать все изменения постоянными с помощью 
транзакции, а ROLLBACK может откатить их обратно или отменить. Новая 
транзакция начинается после каждой команды COMMIT или ROLLBACK. 
Этот процесс известен как диалоговая обработка запросов или транзакция. 
Синтаксис, чтобы оставить все ваши изменения постоянными во время регистрации, или во время последнего COMMIT или ROLLBACK 
<PRE> 
                     COMMIT WORK; 
</PRE> 
Синтаксис отмены изменения - 
<PRE> 
                    ROLLBACK WORK; 
</PRE> 
В большинстве реализаций, вы можете установить параметр, называемый 
AUTOCOMMIT. Он будет автоматически запоминать все действия которые будут выполняться.  Действия которые приведут к ошибке, всегда будут 
автоматически "прокручены" обратно. Если это предусмотрено в вашей системе, для фиксации всех ваших действий, вы можете использовать эту 
возможность с помощью команды типа: 
<PRE> 
                 SET AUTOCOMMIT ON; 
</PRE> 
Вы можете вернуться к обычной диалоговой обработке запросов с помощью такой команды: 
<PRE> 
                 SET AUTOCOMMIT OFF; 
</PRE> 
Имеется возможность установки AUTOCOMMIT которую система выполнит 
автоматически при регистрации. 
Если сеанс пользователя завершается аварийно - например, произошел сбой 
системы или выполнена перезагрузка пользователя, - то текущая транзакция 
выполнит автоматический откат изменений. Это - одна из причин, по которой 
вы можете управлять выполнением вашей диалоговой обработки запросов, 
разделив ваши команды на большое количество различных транзакций. Одиночная транзакция не должна содержать много несвязанных команд; фактически, она может состоять из единственной команды. 
Транзакции которые включают всю группу несвязанных изменений не оставляют вам фактически никакого выбора сохранить или отклонить целую 
группу, если вы хотите отменить только одно определенное изменение. 
Хорошим правилом которому надо следовать, это делать ваши транзакции 
состоящими из одной команды или нескольких близко связанных команд. 
Например, предположим  вы хотите удалить продавца Motika из базы данных. Прежде, чем вы удалите его из таблицы Продавцов, вы сначала должны сделать что-нибудь с его порядками и его заказчиками. ( Если используются ограничения внешнего ключа, и ваша система, следу ANSI, ограничивает изменение родительского ключа, у вас не будет выбора делать 
или не делать этого.  Это будет сделано обязательно.) 
<BR><BR> 
Одно из логических решений, будет состоять в том, чтобы установить поле 
snum в его порядках в NULL, в следствии чего ни один продавец не получит 
комиссионные в этих порядках, пока комиссионные не будут предоставлены 
заказчикам для Peel. Затем вы можете удалить их из таблицы Продавцов: 
<PRE> 
             UPDATE Orders 
                SET snum = NULL 
                WHERE snum = 1004; 
 
             UPDATE Cudomers 
                SET snum = 1001 
                WHERE snum = 1004; 
 
             DELETE FROM Salespeople 
                WHERE snum = 1004; 
</PRE> 
   Если у вас проблема с удалением Motika ( возможно имеется другой 
внешний ключ ссылающийся на него о котором вы не знали и не учитывали ), вы могли бы отменить все изменения которые вы сделали, до тех 
пор пока проблема не будет определена и решена. 
 Более того, это должна быть группа команд, чтобы обрабатывать ее как 
одиночную транзакцию. Вы можете предусмотреть это с помощью команды COMMIT, и завершить ее с помощью команды COMMIT или 
ROLLBACK. 
 <A name=23.7>
<H3>КАК SQL ОБЩАЕТСЯ СРАЗУ СО МНОГИМИ ПОЛЬЗОВАТЕЛЯМИ</H3> 
 SQL часто используется в многопользовательских средах - в средах, где 
сразу много пользователей могут выполнять действия в базе данных одновременно. Это создает потенциальную возможность конфликта между 
различными выполняемыми действиями. Например, предположим что вы 
выполняете команду в таблице Продавцов : 
<PRE> 
          UPDATE Salespeople 
             SET comm = comm * 2 
             WHERE sname LIKE 'R%'; 
</PRE> 
и в это же врем, Diane вводит такой запрос: 
<PRE> 
           SELECT city, AVG (comm) 
              FROM Salespeople 
              GROUP BY city; 
</PRE> 
Может ли усредненное значение(AVG) Diane отразить изменения которые вы 
делаете в таблице? Не важно, будет это сделано или нет, а важно что бы бы- 
ли отражены или все или ни одно из значений комиссионных (comm) для 
которых выполнялись изменения. Любой промежуточный результат является случайным или непредсказуемым, для порядка в котором значения бы- 
ли изменены физически. Вывод запроса, не должен быть случайным и непредсказуемым. 
Посмотрим на это с другой стороны. Предположим, что вы находите ошибку и прокручиваете обратно все ваши модификации уже после того, как 
Diane получила их результаты в виде вывода. В этом случае Diane получит 
ряд усредненных значений основанных на тех изменениях которые были 
позже отменены, не зная что ее информации неточна. 
Обработка одновременных транзакций называется - параллелизмом или сов- 
падением, и имеет номера возможных проблем которые могут при этом возникать.  Имеются следующие примеры: 
<BR><BR> 
*  Модификация может быть сделана без учета другой 
   модификации. Например, продавец должен сделать запрос к таблице  инвентаризации, чтобы найти десять фрагментов пунктов торговцев акциями, и упорядочить шесть из их для заказчика. Прежде, чем 
   это  изменение было сделано, другой продавец делает запрос к таблице и упорядочивает семь из тех же фрагментов для своего заказчика. 
 
<H5>ПРИМЕЧАНИЕ: Термин "упорядочить", аналогичен общепринятому - "заказать", что 
в принципе более соответствует логике запроса, потому что с точки зрения 
пользователя, он именно "заказывает" информацию в базе данных, которая 
упорядочивает эту информацию в соответствии с "заказом".</H5> 
*  Изменения в базе данных могут быть прокручены обратно 
   уже после того, как их действия уже были закончены. 
   Например если Вы отменили вашу ошибку уже после того, как Diane 
   получила свой вывод. 
<BR><BR> 
*  Одно действие может воздействовать частично на результат другого действия. Например когда Diane получает среднее от 
   значений в то врем как вы выполняете модификацию этих значений. 
   Хотя это  не всегда проблематично, в большинстве случаев действие 
   такое же как если бы агрегаты должны были отразить состояние базы 
   данных в пункте относительной стабильности. Например в ревизионных книгах, должна быть возможность вернуться назад и найти это 
   существующее усредненное значение для Diane в некоторой времен- 
   ной точке, и оставить его без изменений которые можно было бы сделаны начиная уже с этого места. Это будет невозможно сделать, если 
   модификация была выполнена во время вычисления функции. 
<BR><BR> 
*  Тупик.  Два пользователя могут попытаться выполнить действия которые конфликтуют друг с другом.   Например, если два 
   пользователя попробуют изменить и значение внешнего ключа и значение родительского ключа одновременно. 
<BR><BR> 
Имеется много сложнейших сценариев которые нужно было бы последовательно просматривать, если бы одновременные транзакции были неуправляемыми. К счастью, SQL обеспечивает вас средством управления 
параллелизмом для точного указания места получения результата. Что 
ANSI указывает для управления параллелизмом - это что все одновременные команды будут выполняться по принципу - ни одна команда не должна быть выдана, пока предыдущая не будет завершена (включая команды COMMIT или ROLLBACK ). 
 Более точно, нужно просто не позволить таблице быть доступной более 
чем для одной транзакции в данный момент времени. Однако в большинстве ситуаций, необходимость иметь базу данных доступную сразу многим 
пользователям, приводит к некоторому компромиссу в управлении параллелизмом. Некоторые реализации SQL предлагают пользователям выбор, 
позволяя им самим находить золотую середину между согласованностью 
данных и доступностью к базе данных. Этот выбор доступен пользователю, 
DBA, или тому и другому. 
   На самом деле они осуществляют это управление вне SQL, даже если и 
воздействуют на процесс работы самой SQL. 
  Механизм используемый SQL для управления параллелизмом операций, 
называется - блокировкой.  Блокировки задерживают определенные операции в базе данных, пока другие операции или транзакции не завершены. 
Задержанные операции выстраиваются в очередь и выполняются только 
когда блокировка снята ( некоторые инструменты блокировок дают вам возможность указывать NOWAIT,  которая будет отклонять команду вместо 
того чтобы поставить ее в очередь, позволяя вам делать что-нибудь другое). 
<BR><BR> 
  Блокировки в многопользовательских системах необходимы. Следователь- 
но, должен быть некий тип схемы блокировки по умолчанию, который мог 
бы применяться ко всем командам в базе данных. Такая схема по умолчанию, 
может быть определена для всей базы данных, или в качестве параметра в 
команде CREATE DBSPACE или команде ALTER DBSPACE, и таким 
образом использовать их по разному в различных DBS. 
Кроме того, системы обычно обеспечиваются неким типом обнаружителя 
зависания, который может обнаруживать ситуации, где две операции имеют блокировки, блокирующие друг друга. В этом случае, одна из команд 
будет прокручена обратно и получит сброс блокировки. 
Так как терминология и специфика схем блокировок меняются от программы к программе, мы можем смоделировать наши рассуждения на примере 
программы базы данных DB2 фирмы IBM. IBM - лидер в этой области 
(как впрочем и во многих других ),  и поэтому такой подход наиболее удобен. С другой стороны, некоторые реализации могут иметь значительные 
различи в синтаксисе и в функциях, но в основном их действия должно 
быть очень похожими. 
<A name=23.8>
<H3>ТИПЫ БЛОКИРОВОК</H3> 

Имеется два базовых типа блокировок: <BR>
- распределяемые блокировки  и<BR> 
- специальные блокировки. <BR>
Распределяемые ( или S-блокировки ) могут быть установлены более чем 
одним пользователем в данный момент времени. Это дает возможность любому числу пользователей обращаться к данным, но не изменять их. 
Специальные блокировки ( или X-блокировки ) не позволяют никому вообще, кроме владельца этой блокировки обращаться к данным. 
Специальные блокировки используются для команд которые изменяют содержание или структуру таблицы.  Они действуют до конца транзакции. 
Общие блокировки используются для запросов. Насколько они продолжительны зависит фактически от уровня изоляции. 
Что такое уровень изоляции блокировки? Это - то, что определяет, сколь- 
ко таблиц будет блокировано. 
В DB2, имеется три уровня изоляции, два из которых можно применить и 
к распределенным и к специальным блокировкам, а третий, ограниченный, 
чтобы использовать эти блокировки совместно. Они управляются команда- 
ми поданными извне SQL, так что мы можем обсуждать не указывая их 
точного синтаксиса. Точный синтаксис команд связанных с блокировками 
- различен для различных реализаций. 
Следующее обсуждение полезно прежде всего на концептуальном уровне. 
<BR><BR>
Уровень изоляции - повторное чтение - гарантирует, что внутри данной 
транзакции, все записи извлеченные с помощью запросов, не могут быть 
изменены. Поскольку записи модифицируемые в транзакции являются 
субъектами специальной блокировки, пока транзакция не завершена, они 
не могут быть изменены в любом случае. 
С другой стороны для запросов, повторное чтение означает, что вы можете решить заранее, какие строки вы хотите заблокировать и выполнить 
запрос который их выберет. Выполняя запроса, вы гарантированы, что 
никакие изменения не будут сделаны в этих строках, до тех пор пока вы 
не завершите текущую транзакцию. 
В то время как повторное чтение защищает пользователя, который поместил блокировку, она может в то же время значительно снизить производительность. 
Уровень указатель стабильности - предохраняет каждую запись от изменений, на время когда она читается или от чтения на врем ее изменения. 
Последний случай это специальна блокировка, и применяется пока изменение не завершено или пока оно не отменено( т.е. на время отката изменения ). 
Следовательно, когда вы модифицируете группу записей использующих 
указатель стабильности, эти записи будут заблокированы пока транзакция 
не закончится, что аналогично действию производимому уровнем повторное чтение. Различие между этими двум уровнями в их воздействии на 
запросы.  В случае уровня указатель стабильности, строки таблицы которые в данное время не используются запросом, могут быть изменены. 
Третий уровень изоляции DB2 - это уровень только чтение. 
Только чтение фиксирует фрагмент данных; хотя на самом деле он блокирует всю таблицу. Следовательно, он не может использоваться с команда- 
ми модификации. Любое содержание таблицы как единое целое, в момент 
выполнения команды, будет отражено в выводе запроса. 
Это не обязательно так как в случае с уровнем указатель стабильности. 
Блокировка только чтение,  гарантирует что ваш вывод будет внутренне 
согласован, если конечно нет необходимости во второй блокировке, не связывающей большую часть таблицы с уровнем повторное чтение. 
Блокировка только чтение удобна тогда, когда вы делаете отчеты, которые 
должны быть внутренне согласованны, и позволять доступ к большинству 
или ко всем строкам таблицы, не связывая базу данных. 
<A name=23.9>
<H3>ДРУГИЕ СПОСОБЫ БЛОКИРОВКИ ДАННЫХ</H3> 
<BR><BR>
Некоторые реализации выполняют блокировку страницы вместо блоки- 
ровки строки. Это может быть либо возможностью для вашего управления либо нечто заложенным уже в конструкцию системы. 
<BR><BR>
Страница - это блок накопления памяти, обычно равный 1024 байт. 
Страница может состоять из одной или более строк таблицы, возможно 
сопровождаемых индексами и другой периферийной информацией, а 
может состоять даже из нескольких строк другой таблицы. 
Если вы блокируете страницы вместо строк, все данные в этих страницах будут блокированы точно также как и в индивидуальных строках, 
согласно уровням изоляции описанным выше. 
Основным преимуществом такого подхода является эффективность. 
Когда SQL не следит за блокированностью и разблокированностью строк 
индивидуально, он работает быстрее. С другой стороны, язык SQL был 
разработан так чтобы максимизировать свои возможности, и произвольно блокирует строки которые необязательно было блокировать. 
Похожа возможность, доступна в некоторых системах - это блоки- 
ровка областей DBS. Области базы данных имеют тенденцию быть больше чем страница, так что этот подход удовлетворяет и достоинству увеличения производительности и недостатку блокирования страниц. 
Вообще то лучше отключать блокировку низкого уровня если вам кажется что появились значительные проблемы с эффективностью. 
<A name=23.10>
<H3>РЕЗЮМЕ</H3>Ключевые определения, с которыми вы познакомились в этой главе: 
<BR><BR>
*  Синонимы, или как создавать новые имена для объектов данных. 
<BR><BR>
*  Области базы данных (DBS), или как распределяется доступна 
память в базе данных. 
<BR><BR>
*  Транзакция, или как сохранять или восстанавливать изменения в 
базе данных. 
<BR><BR>
*  Управление Параллелизмом, или как SQL предохраняет от конфликта одной команды с другой. 
<BR><BR>
Синонимы - это объекты, в том смысле, что они имеют имена и (иногда) 
владельцев, но естественно они не могут существовать без таблицы, чье 
им они замещают. Они могут быть общими и следовательно доступны- 
ми каждому кто имеет доступ к объекту, или они могут принадлежать 
определенному пользователю. 
<BR><BR>
Области DBS или просто DBS - это подразделы базы данных, которые 
распределены для пользователей. Связанные таблицы, ( например таблицы, которые будут часто объединяться,) лучше хранить в общей для 
них DBS. 
<BR><BR>
СOMMIT и ROLLBACK-это команды, используемые для выполнения 
изменений в базе данных, в то врем когда предыдущая команда COMMIT 
или команда ROLLBACK, начинают сеанс и оставляют изменения , или 
игнорируют их как группу. 
<BR><BR>
Средство Управление Параллелизмом - определяет в какой степени 
одновременно поданные команды будут мешать друг другу. Оно является адаптируемым средством, находящим компромисс между производительностью базы данных и изоляцией действующих команд. 

<A name=23.11>
<H3>РАБОТА С SQL</H3>  
<BR><BR>
1. Создайте область базы данных с именем Myspace которая 
выделяет 15 процентов своей области для индексов, и 40 
процентов на расширение строк. 
<BR><BR>
2. Вы получили право SELECT в таблице Порядков продавца Diane. 
Введите команду так чтобы вы могли ссылаться к этой таблице 
как к "Orders" не используя им "Diane" в качестве префикса. 
<BR><BR>
3. Если произойдет сбой питания, что случится с всеми изменениями 
сделанными во врем текущей транзакции ? 
<BR><BR>
4. Если вы не можете видеть строку из-за ее блокировки,  какой это 
тип блокировки ? 
<BR><BR>
5. Если вы хотите получить общее, максимальное, и усредненное 
значения сумм приобретений для всех порядков, и не хотите при 
этом запрещать другим пользоваться таблицей, какой уровень 
изоляции будет этому соответствовать ? 
<BR><BR>
( См. <A href="a.shtml.htm#23" tppabs="http://www.sql.ru/docs/sql/u_sql/a.shtml#23">Приложение A</A> для ответов. ) 
</TD></TR></TABLE>
</TD></TR>
<TR BGCOLOR=#6699CC><TD><TABLE WIDTH=100% BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD BGCOLOR=#6699CC VALIGN=CENTER HEIGHT = 40><FONT SIZE=-10>
<!--begin of Top100 logo-->
<a href="javascript:if(confirm('http://top100.rambler.ru/top100/  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://top100.rambler.ru/top100/'" tppabs="http://top100.rambler.ru/top100/">
<img src="../../../../top100-images.rambler.ru/top100/banner-88x31-rambler-gray2.gif" tppabs="http://top100-images.rambler.ru/top100/banner-88x31-rambler-gray2.gif" alt="Rambler's Top100" width=88 height=31 border=0></a>
<!--end of Top100 logo -->
</FONT>
<!--Rating@Mail.ru COUNTER--><a target=_top
href="javascript:if(confirm('http://top.mail.ru/jump?from=58574  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://top.mail.ru/jump?from=58574'" tppabs="http://top.mail.ru/jump?from=58574"><img
src="../../../../top.list.ru/counter-id=58574;t=94.gif" tppabs="http://top.list.ru/counter?id=58574;t=94"
border=0 height=18 width=88
alt="Рейтинг@Mail.ru"></a><!--/COUNTER-->
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a style="font : bold 10px verdana; color : white" href="javascript:if(confirm('http://hosting.parking.ru/  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://hosting.parking.ru/'" tppabs="http://hosting.parking.ru/">Хостинг от компании Parking.ru</a>
<script src="../../../../www.google-analytics.com/urchin.js" tppabs="http://www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-265508-1";
urchinTracker();
</script>
</TD>
<TD BGCOLOR=#6699CC ALIGN=right><FONT COLOR=white FACE="Tahoma,Arial" SIZE=1>&nbsp;Administrator:&nbsp;<A STYLE="color :white" HREF="mailto:admin@sql.ru">admin@sql.ru</A>&nbsp;<BR>Last update: <FONT COLOR=white>05 июн 2007&nbsp;</FONT></FONT></TD></TR></TABLE>
</TD></TR></TABLE></TD></TR></TABLE>

</BODY></HTML>

