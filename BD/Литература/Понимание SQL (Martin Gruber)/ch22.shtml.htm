<HTML>
<HEAD>
<TITLE>Понимание SQL. Глава 22. Кто что может делать в базе данных. [SQL.RU]</TITLE>
<META http-equiv="Content-Type" CONTENT="text/html; charset=windows-1251">
<META HTTP-EQUIV="Window-target" CONTENT="_top">
<META HTTP-EQUIV="Last-Modified" CONTENT="29-03-2001">
<META NAME="Description" CONTENT="Использование языка SQL, создание клиент-серверных систем. Конференция по MSSQL, Oracle, Interbase, MySQL. Полезные ссылки, документация, рекомендации по разработке информационных систем, сертификация, заказ книг и многое другое.">
<META NAME="Keywords" CONTENT="SQL, конференция, Database Server, Oracle, Interbase, MySQL, документация, статьи, примеры, книги, ссылки, сертификация, работа, СУБД">
<LINK REL=STYLESHEET TYPE="text/css" HREF="../../../form.css" tppabs="http://www.sql.ru/form.css">
</HEAD>
<BODY BGCOLOR="#FFFFFF" leftmargin="3" topmargin="3" marginheight="3" marginwidth="3">
<noindex>
<TABLE BGCOLOR="#000000" WIDTH=100% CELLPADDING=0 CELLSPACING=0 BORDER=0>
<TR><TD>

<TABLE WIDTH=100% CELLPADDING=0 CELLSPACING=1 BORDER=0>
<TR BGCOLOR="#6699CC"><TD><TABLE CELLSPACING=0 CELLPADDING=0 WIDTH=100% BORDER=0 BGCOLOR="#6699CC">
<TR><TD COLSPAN=3><IMG SRC="../../../images/blank.gif" tppabs="http://www.sql.ru/images/blank.gif" height=3 width=1 alt=""></TD></TR>
<TR><TD VALIGN=TOP>&nbsp;<FONT FACE="Verdana,Arial" SIZE=5 COLOR=lightyellow>SQL.RU<BR><FONT SIZE=-5>&nbsp;client/server technologies</FONT></FONT><!--begin of Top100--><a href="javascript:if(confirm('http://top100.rambler.ru/top100/  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://top100.rambler.ru/top100/'" tppabs="http://top100.rambler.ru/top100/"><img src="../../../../counter.rambler.ru/top100.cnt-236431.gif" tppabs="http://counter.rambler.ru/top100.cnt?236431" alt="Rambler's Top100" width=1 height=1 border=0></a><!--end of Top100 code--></TD>
<TD WIDTH=468 HEIGHT=60 BGCOLOR=#6699CC ALIGN=RIGHT></TD>
<TD WIDTH=2><IMG SRC="../../../images/blank.gif" tppabs="http://www.sql.ru/images/blank.gif" height=1 width=2 alt=""></TD></TR>                                                      	
<TR HEIGHT=4><TD COLSPAN=3><IMG SRC="../../../images/blank.gif" tppabs="http://www.sql.ru/images/blank.gif" height=5 width=1 alt=""></TD></TR></TABLE>

</TD></TR>

<TR HEIGHT=15><TD bgcolor=#006699><FONT FACE="Verdana,Arial" SIZE=1 COLOR=WHITE><B><A CLASS="menu" 
HREF="javascript:if(confirm('http://www.sql.ru/  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.sql.ru/'" tppabs="http://www.sql.ru/">&nbsp;<FONT COLOR=white>Главная</FONT>&nbsp;</A>|<A CLASS="menu" 
HREF="javascript:if(confirm('http://www.sql.ru/docs  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.sql.ru/docs'" tppabs="http://www.sql.ru/docs">&nbsp;<FONT COLOR=yellow>Документация</FONT>&nbsp;</A>|<A CLASS="menu" 
HREF="javascript:if(confirm('http://www.sql.ru/articles  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.sql.ru/articles'" tppabs="http://www.sql.ru/articles">&nbsp;<FONT COLOR=white>Статьи</FONT>&nbsp;</A>|<A CLASS="menu" 
HREF="javascript:if(confirm('http://www.sql.ru/books  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.sql.ru/books'" tppabs="http://www.sql.ru/books">&nbsp;<FONT COLOR=white>Книги</FONT>&nbsp;</A>|<A CLASS="menu" 
HREF="javascript:if(confirm('http://www.sql.ru/forum/actualforum.aspx  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.sql.ru/forum/actualforum.aspx'" tppabs="http://www.sql.ru/forum/actualforum.aspx">&nbsp;<FONT COLOR=white>Форум</FONT>&nbsp;</A>|<A CLASS="menu" 
HREF="javascript:if(confirm('http://www.sql.ru/poll  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.sql.ru/poll'" tppabs="http://www.sql.ru/poll">&nbsp;<FONT COLOR=white>Опросы</FONT>&nbsp;</A>|<A CLASS="menu" 
HREF="javascript:if(confirm('http://www.sql.ru/forum/actualtopics.aspx?bid=11  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.sql.ru/forum/actualtopics.aspx?bid=11'" tppabs="http://www.sql.ru/forum/actualtopics.aspx?bid=11">&nbsp;<FONT COLOR=white>Гостевая</FONT>&nbsp;</A>|<A CLASS="menu"
HREF="javascript:if(confirm('http://www.sql.ru/subscribe  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.sql.ru/subscribe'" tppabs="http://www.sql.ru/subscribe">&nbsp;<FONT COLOR=white>Рассылка</FONT>&nbsp;</A>|<A CLASS="menu"
HREF="javascript:if(confirm('http://www.sql.ru/job  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.sql.ru/job'" tppabs="http://www.sql.ru/job">&nbsp;<FONT COLOR=white>Работа</FONT>&nbsp;</A>|<A CLASS="menu"
HREF="javascript:if(confirm('http://www.sql.ru/search  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.sql.ru/search'" tppabs="http://www.sql.ru/search">&nbsp;<FONT COLOR=white>Поиск</FONT>&nbsp;</A>|<A CLASS="menu"
HREF="javascript:if(confirm('http://www.sql.ru/faq  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://www.sql.ru/faq'" tppabs="http://www.sql.ru/faq">&nbsp;<FONT COLOR=white>FAQ</FONT>&nbsp;</A>|</B></FONT></TD></TR>
<TR><TD BGCOLOR=#F5F5F5>
</noindex>

<TABLE BORDER=0 CELLSPACING=10><TR><TD>
<CENTER>
<H2 class="headline">
22. КТО ЧТО МОЖЕТ ДЕЛАТЬ В БАЗЕ ДАННЫХ</H2></CENTER>
<P>В этой главе, вы обучитесь работе с привилегиями. Как сказано в <A 
href="ch2.shtml.htm" tppabs="http://www.sql.ru/docs/sql/u_sql/ch2.shtml">Главе 2</A>, 
SQL используется обычно в средах, которые требуют распознавания пользователей и 
различия между различными пользователями систем. Вообще говор, администраторы 
баз данных, сами создают пользователей и дают им привилегии. С другой стороны 
пользователи которые создают таблицы, сами имеют права на управление этими 
таблицами. Привилегии - это то, что определяет, может ли указанный пользователь 
выполнить данную команду. Имеется несколько типов привилегий, соответствующих 
нескольким типам операций. Привилегии даются и отменяются двум командами SQL : - 
GRANT (ДОПУСК) и REVOKE (ОТМЕНА). Эта глава покажет вам как эти команды 
используются. <A name=22.1>
<P>
<H3>ПОЛЬЗОВАТЕЛИ</H3>
<P>Каждый пользователь в среде SQL, имеет специальное идентификационное имя или 
номер. Терминология везде разная, но мы выбрали (следу ANSI) ссылку на им или 
номер как на Идентификатор (ID) доступа. Команда, посланная в базе данных 
ассоциируется с определенным пользователем; или иначе, специальным 
Идентификатором доступа. Поскольку это относится к SQL базе данных, ID 
разрешения - это имя пользователя, и SQL может использовать специальное ключевое 
слово USER, которое ссылается к Идентификатору доступа связанному с текущей 
командой. Команда интерпретируется и разрешается (или запрещается) на основе 
информации связанной с Идентификатором доступа пользователя подавшего команду. 
<P><A name=22.2>
<H3>РЕГИСТРАЦИЯ</H3>
<P>В системах с многочисленными пользователями, имеется некоторый вид процедуры 
входа в систему, которую пользователь должен выполнить чтобы получить доступ к 
компьютерной системе. Эта процедура определяет какой ID доступа будет связан с 
текущим пользователем. Обычно, каждый человек использующий базу данных должен 
иметь свой собственный ID доступа и при регистрации превращается в 
действительного пользователям. Однако, часто пользователи имеющие много задач 
могут регистрироваться под раз- личными ID доступа, или наоборот один ID доступа 
может использоваться несколькими пользователями. С точки зрения SQL нет никакой 
разницы между этими двум случаями; он воспринимает пользователя просто как его 
ID доступа. SQL база данных может использовать собственную процедуру входа в 
систему, или она может позволить другой программе, типа операционной системы ( 
основная программа которая работает на вашем компьютере ), обрабатывать файл 
регистрации и получать ID доступа из этой программы. Тем или другим способом, но 
SQL будет иметь ID доступа чтобы связать его с вашими действиями, а для вас 
будет иметь значение ключевое слово USER. 
<P><A name=22.3>
<H3>ПРЕДОСТАВЛЕНИЕ ПРИВИЛЕГИЙ</H3>
<P>Каждый пользователь в SQL базе данных имеет набор привилегий. Это - то что 
пользователю разрешается делать ( возможно это - файл регистрации, который может 
рассматриваться как минимальная привилегия ). Эти привилегии могут изменяться со 
временем - новые добавляться, старые удаляться. Некоторые из этих привилегий 
определены в ANSI SQL, но имеются и дополнительные привилегии, которые являются 
также необходимыми. SQL привилегии как определено ANSI, не достаточны в 
большинстве ситуаций реальной жизни. С другой стороны, типы привилегий, которые 
необходимы, могут видоизменяться с видом системы которую вы используете - 
относительно которой ANSI не может дать никаких рекомендаций. Привилегии которые 
не являются частью стандарта SQL могут использовать похожий синтаксис и не 
полностью совпадающий со стандартом. 
<P><A name=22.4>
<H3>СТАНДАРТНЫЕ ПРИВИЛЕГИИ</H3>
<P>SQL привилегии определенные ANSI - это привилегии объекта. Это означает что 
пользователь имеет привилегию чтобы выполнить данную команду только на 
определенном объекте в базе данных. Очевидно, что привилегии должны различать 
эти объекты, но система привилегии основанная исключительно на привилегиях 
объекта не может адресовать все что нужно SQL, как мы увидим это позже в этой 
главе. Привилегии объекта связаны одновременно и с пользователями и с таблица- 
ми. То есть, привилегия дается определенному пользователю в указанной таблице, 
или базовой таблице или представлении. Вы должны помнить, что пользователь 
создавший таблицу (любого вида), является владельцем этой таблицы. 
<P>Это означает, что пользователь имеет все привилегии в этой таблице и может 
передавать привилегии другим пользователям в этой таблице. Привилегии которые 
можно назначить пользователю:
<BR><BR>
SELECT           Пользователь с этой привилегией может выполнять 
                      запросы в таблице. 
<BR><BR> 
INSERT           Пользователь с этой привилегией может выполнять 
                      команду INSERT в таблице. 
<BR><BR> 
UPDATE         Пользователь с этой привилегией может выполнять 
                     команду UPDATE на таблице. 
                     Вы можете ограничить эту привилегию для определенных 
		     столбцов таблицы. 
<BR><BR> 
DELETE         Пользователь с этой привилегией может выполнять 
                     команду DELETE в таблице. 
<BR><BR> 
REFERENCES  Пользователь с этой привилегией может определить 
                     внешний ключ, который использует один или более 
                     столбцов этой таблицы, как родительский ключ. 
                     Вы можете ограничить эту привилегию для определенных 
		     столбцов. ( Смотрите <A href="ch19.shtml.htm" tppabs="http://www.sql.ru/docs/sql/u_sql/ch19.shtml">Главу 19</A> 
		     для подробностей относительно внешнего ключа и 
		     родительского ключа. ) 
 
<BR><BR> 
<P>Кроме того, вы столкнетесь с нестандартными привилегиями объекта, такими 
например как INDEX (ИНДЕКС) дающим право создавать индекс в таблице, SYNONYM 
(СИНОНИМ) дающим право создавать синоним для объекта, который будет объяснен в 
<A href="ch23.shtml.htm" tppabs="http://www.sql.ru/docs/sql/u_sql/ch23.shtml">Главе 
23</A>, и ALTER (ИЗМЕНИТЬ) дающим право выполнять команду ALTER TABLE в таблице. 
Механизм SQL назначает пользователям эти привилегии с помощью команды GRANT. 
<P><A name=22.5>
<H3>КОМАНДА GRANT</H3>
<P>Позвольте предположить, что пользователь Diane имеет таблицу Заказчиков и 
хочет позволить пользователю Adrian выполнить запрос к ней. Diane должна в этом 
случае ввести следующую команду: 
<PRE>GRANT INSERT ON Salespeople TO Diane; </PRE>
<P>Теперь Adrian может выполнить запросы к таблице Заказчиков. Без дру- гих 
привилегий, он может только выбрать значения; но не может выполнить любое 
действие, которые бы воздействовало на значения в таблице Заказчи- ков ( включая 
использование таблицы Заказчиков в качестве родительской таблицы внешнего ключа, 
что ограничивает изменения которые выполнять со значением в таблице Заказчиков). 

<P>Когда SQL получает команду GRANT, он проверяет привилегии пользователя 
подавшего эту команду, чтобы определить допустима ли команда GRANT. Adrian 
самостоятельно не может выдать эту команду. Он также не может предоставить право 
SELECT другому пользователю: таблица еще принадлежит Diane ( позже мы покажем 
как Diane может дать право Adrian предоставлять SELECT другим пользователям). 
<P>Синтаксис - тот же самый, что и для предоставлени других привилегий. Если 
Adrian - владелец таблицы Продавцов, то он может позволить Diane вводить в нее 
строки с помощью следующего предложения 
<PRE>GRANT INSERT ON Salespeople TO Diane; </PRE>
Теперь Diane имеет право помещать нового продавца в таблицу. 
<P>
<H4>ГРУППЫ ПРИВИЛЕГИЙ, ГРУППЫ ПОЛЬЗОВАТЕЛЕЙ</H4>
<P>Вы не должны ограничивать себя предоставлением одиночной привилегии 
отдельному пользователю командой GRANT. Списки привилегий или пользователей, 
отделяемых запятыми, являются совершенно приемлемыми. Stephen может предоставить 
и SELECT и INSERT в таблице Порядков для Adrian 
<PRE>GRANT SELECT, INSERT ON Orders TO Adrian; </PRE>
или и для Adrian и для Diane 
<PRE>GRANT SELECT, INSERT ON Orders TO Adrian, Diane; </PRE>
<P>Когда привилегии и пользователи перечислены таким образом, весь спи- сок 
привилегий предоставляются всем указанным пользователям. В строгой ANSI 
интерпретации, вы не можете предоставить привилегии во многих таблицах сразу 
одной командой, но в некоторых реализациях это ограничение может быть ослаблено, 
позволяя вам указывать несколько таблиц, отделяя их запятыми, так что бы весь 
список привилегий мог быть предоставлен для всех указанных таблиц. 
<P>
<H4>ОГРАНИЧЕНИЕ ПРИВИЛЕГИЙ НА ОПРЕДЕЛЕННЫЕ СТОЛБЦЫ</H4>
<P>Все привилегии объекта используют один тот же синтаксис, кроме команд UPDATE 
и REGERNCES в которых необязательно указывать имена столбцов. Привилегию UPDATE 
можно предоставлять наподобие других привилегий: 
<P>GRANT UPDATE ON Salespeople TO Diane; 
<P>Эта команда позволит Diane изменять значения в любом или во всех столбцах 
таблицы Продавцов. Однако, если Adrian хочет ограничить Diane в изменении 
например комиссионных, он может ввести 
<P>GRANT UPDATE (comm) ON Salespeople TO Diane; 
<P>Другими словами, он просто должен указать конкретный столбец к которому 
привилегия UPDATE должна быть применена, в круглых скобках после имени таблицы. 
Имена многочисленных столбцов таблицы могут указываться в любом порядке, 
отделяемые запятыми: 
<P>GRANT UPDATE (city, comm) ON Salespeople TO Diane; 
<P>REFERENCES следует тому же самому правилу. Когда вы предоставите при- вилегию 
REFERENCES другому пользователю, он сможет создавать внешние ключи ссылающиеся 
на столбцы вашей таблицы как на родительские ключи. Подобно UPDATE, для 
привилегии REFERENCES может быть указан список из одного или более столбцов для 
которых ограничена эта привилегия. Например, Diane может предоставить Stephen 
право использовать таблицу Заказчиков, как таблицу родительского ключа, с 
помощью такой команды:     
<PRE>
  GRANT REFERENCES (cname, cnum) ON Customers TO Stephen; 
</PRE> 
 Эта команда дает Stephen право использовать столбцы cnum и cname, в 
качестве родительских ключей по отношению к любым внешним ключам в его таблицах. 
Stephen может контролировать то как это будет выполнено. Он может определить 
(cname, cnum) или, как в нашем случае( cnum, cname), как двух-столбцовый 
родительский ключ, совпадающий с помощью внешнего ключа с двум столбцами в одной 
из его собственных таблиц. Или он может создать раздельные внешние ключи чтобы 
ссылаться на пол индивидуально, обеспечив тем самым чтобы Diane имела 
принудительное присвоение роди- тельского ключа (см. <A 
href="ch19.shtml.htm" tppabs="http://www.sql.ru/docs/sql/u_sql/ch19.shtml">Главу 
19</A> ). 
<P>Не имея ограничений на номера внешних ключей он должен базироваться на этих 
родительских ключах, а родительские ключи различных внешних ключей - разрешены 
для совмещения(overlap). 
<P>Как и в случае с привилегией UPDATE, вы можете исключить список столб- цов и 
таким образом позволять всем без исключения столбцам быть используемыми в 
качестве родительских ключей. Adrian может предоставить Diane право сделать это 
следующей командой: 
<PRE>GRANT REFERENCES ON Salespeople TO Diane; </PRE>
<P>Естественно, привилегия будет пригодна для использования только в столбцах, 
которые имеют ограничения требуемые для родительских ключей. 
<P><A name=22.6>
<H3>ИСПОЛЬЗОВАНИЕ АРГУМЕНТОВ ALL И PUBLIC</H3>
<P>SQL поддерживает два аргумента для команды GRANT, которые имеют специальное 
значение: ALL PRIVILEGES (ВСЕ ПРИВИЛЕГИИ) или просто ALL и PUBLIC (ОБЩИЕ). ALL 
используется вместо имен привилегий в команде GRANT чтобы отдать все привилегии 
в таблице. Например, Diane может дать Stephen весь набор привилегий в таблице 
Заказчиков с помощью такой команды: 
<P>GRANT REFERENCES ON Salespeople TO Diane; 
<P>( привилегии UPDATE и REFERENCES естественно применяются ко всем столбцам. ) 
А это другой способ высказать ту же мысль: 
<P>GRANT ALL ON Customers TO Stephen; 
<P>PUBLIC - больше похож на тип аргумента - захватить все (catch-all), чем на 
пользовательскую привилегию. Когда вы предоставляете привилегии для публикации, 
все пользователи автоматически их получают. Наиболее часто, это применяется для 
привилегии SELECT в определенных базовых таблицах или представлениях которые вы 
хотите сделать доступными для любого пользователя. Чтобы позволить любому 
пользователю видеть таблицу Порядков, вы, например, можете ввести следующее: 
<P>GRANT SELECT ON Orders TO PUBLIC; 
<P>Конечно, вы можете предоставить любые или все привилегии обществу, но это 
видимо нежелательно. Все привилегии за исключением SELECT позволяют пользователю 
изменять ( или, в случае REFERENCES, ограничивать) содержание таблицы. 
Разрешение всем пользователям изменять содержание ваших таблиц вызовет проблему. 
<BR><BR>
<P>Даже если вы имеете небольшую компанию, и в ней работают все ваши текущие 
пользователи способные выполнять команды модификации в данной таблице, было бы 
лучше предоставить привилегии каждому пользователю индивидуально, чем одни и те 
же привилегии для всех. PUBLIC не ограничен в его передаче только текущим 
пользователям. Любой новый пользователь добавляемый к вашей системе, 
автоматически получит все привилегии назначенные ранее всем, так что если вы за- 
хотите ограничить доступ к таблице всем, сейчас или в будущем, лучше всего 
предоставить привилегии иные чем SELECT для индивидуальных пользователей. 
<P><A name=22.7>
<H3>ПРЕДОСТАВЛЕНИЕ ПРИВИЛЕГИЙ С ПОМОЩЬЮ WITH GRANT OPTION</H3>
<P>Иногда, создателю таблицы хочется чтобы другие пользователи могли получить 
привилегии в его таблице. Обычно это делается в системах, где один или более 
людей создают несколько (или все) базовые таблицы в ба- зе данных а затем 
передают ответственность за них тем кто будет фактически с ними работать. SQL 
позволяет делать это с помощью предложения WITH GRANT OPTION. Если Diane хотела 
бы чтобы Adrian имел право предоставлять привилегию SELECT в таблице Заказчиков 
другим пользователям, она дала бы ему привилегию SELECT с использованием 
предложения WITH GRANT OPTION:           
<PRE>
GRANT SELECT ON Customers TO Adrian WITH GRANT OPTION; 
</PRE> 
 После того Adrian получил право передавать привилегию SELECT треть- им 
лицам; он может выдать команду 
<PRE>GRANT SELECT ON Diane.Customers TO Stephen; </PRE>
или даже  
</PRE>GRANT SELECT ON Diane.Customers TO Stephen WITH GRANT OPTION; </PRE>
 
 Пользователь с помощью GRANT OPTION в особой привилегии для дан- ной 
таблицы, может, в свою очередь, предоставить эту привилегию к той же таблице, с 
или без GRANT OPTION, любому другому пользователю. Это не меняет принадлежности 
самой таблицы; как и прежде таблица принадлежат ее создателю. ( поэтому 
пользователи получившие права, должны устанавливать префикс ID доступа владельца 
когда ссылаются к этим таблицам. Следующая глава покажет вам этот способ. ) 
Пользователь же с помощью GRANT OPTION во всех привилегиях для данной таблицы 
будет иметь всю полноту власти в той таблице. 
<P><A name=22.8>
<H3>ОТМЕНА ПРИВИЛЕГИЙ</H3>
<P>Также как ANSI предоставляет команду CREATE TABLE чтобы создать таблицу, а не 
DROP TABLE чтобы от нее избавиться, так и команда GRANT позволяет вам давать 
привилегии пользователям, не предоставляя способа чтобы отобрать их обратно. 
Потребность удалять привилегии сводится к команде REVOKE, фактически 
стандартному средству с достаточно понятной формой записи. Синтаксис команды 
REVOKE - похож на GRANT, но имеет обратный смысл. Чтобы удалить привилегию 
INSERT для Adrian в таблице Порядков, вы можете ввести 
<PRE>
       REVOKE INSERT ON Orders FROM Adrian; </PRE>
<P>Использование списков привилегий и пользователей здесь допустимы как и в 
случае с GRANT, так что вы можете ввести следующую команду:  
<PRE>
       REVOKE INSERT, DELETE ON Customers FROM Adrian, Stephen; 
</PRE>
Однако, здесь имеется некоторая неясность. Кто имеет право отменять при- 
вилегии? Когда пользователь с правом передавать привилегии другим, теряет это 
право? Пользователи которым он предоставил эти привилегии, также их потеряют ? 
Так как это не стандартна особенность, нет никаких авторитетных ответов на эти 
вопросы, но наиболее общий подход - это такой: * Привилегии отменяются 
пользователем который их предоставил, и отмена будет каскадироваться, то есть 
она будет автоматически распространяться на всех пользователям получивших от 
него эту привилегию. 
<P><A name=22.9>
<H3>ИСПОЛЬЗОВАНИЕ ПРЕДСТАВЛЕНИЙ ДЛЯ ФИЛЬТРАЦИИ ПРИВИЛЕГИЙ</H3>
<P>Вы можете сделать действия привилегий более точными, используя представления. 
Всякий раз, когда вы передаете привилегию в базовой таблице пользователю, она 
автоматически распространяется на все строки, а при использовании возможных 
исключений UPDATE и REFERENCES, на все столбцы таблицы. Создавая представление 
которое ссылается на основную таблицу и затем переносит привилегию на 
представление, а не на таблицу, вы можете ограничивать эти привилегии любыми 
выражениями в запросе содержащимся в представлении. Это значительно улучшает 
базисные возможности команды GRANT. 
<P>
<H4>КТО МОЖЕТ СОЗДАВАТЬ ПРЕДСТАВЛЕНИЯ?</H4>
<P>Чтобы создавать представление, вы должны иметь привилегию SELECT во всех 
таблицах на которые вы ссылаетесь в представлении. Если представ- ление - 
модифицируемое, любая привилегия INSERT, UPDATE, и DELETE которые вы имеете в 
базовой таблице, будут автоматически передаваться представлению. Если вы 
испытываете недостаток в привилегиях на моди- фикацию в базовых таблицах, вы не 
сможете иметь их и в представления- х которые создали, даже если сами эти 
представления - модифицируе- мые. Так как внешние ключи не используются в 
представлениях, привилегия REFERENCES никогда не используется при создании 
представлений. Все эти ограничения - определяются ANSI. Нестандартные привилегии 
си- стемы ( обсуждаемые позже в этой главе ) также могут быть включены. В 
последующих разделах мы предположим, что создатели представлений которые мы 
обсуждаем, имеют частные или соответствующие привилегии во всех базовых 
таблицах. 
<P><B>ОГРАНИЧЕНИЕ ПРИВИЛЕГИИ SELECT ДЛЯ ОПРЕДЕЛЕННЫХ СТОЛБЦОВ</B> 
<P>Предположим вы хотите дать пользователю Claire способность видеть только 
столбцы snum и sname таблицы Продавцов. Вы можете сделать это, поместив имена 
этих столбцов в представление  
<PRE>
            CREATE VIEW Clairesview 
            AS SELECT snum, sname 
               FROM Salespeople; 
</PRE> 
и предоставить Claire привилегию SELECT в представлении, а не в самой 
таблице Продавцов: 
<PRE>          
	  GRANT SELECT On Clairesview to Claire; 
</PRE> 
Вы можете создать привилегии специально для столбцов наподобие 
использования других привилегий, но, для команды INSERT, это будет означать 
вставку значений по умолчанию, а для команды DELETE, ограничение столбца не 
будет иметь значения. Привилегии REFERENCES и UPDATE, конечно, могут сделать 
столбцы специфическими не прибегая к представлению. 
<P><B>ОГРАНИЧЕНИЕ ПРИВИЛЕГИЙ ДЛЯ ОПРЕДЕЛЕННЫХ СТРОК</B> Обычно, более полезный способ чтобы фильтровать привилегии с представлениями  - это использовать представление чтобы привилегия относилась 
только к определенным строкам. Вы делаете это, естественно, используя 
предикат в представлении который определит, какие строки являются включенными. Чтобы предоставить пользователю Adrian, привилегию UPDATE в 
таблице Заказчиков, для всех заказчиков размещенных в Лондоне, вы можете создать такое представление: 
<PRE> 
       CREATE VIEW Londoncust 
          AS SELECT * 
             FROM Customers 
             WHERE city = 'London' 
             WITH CHECK OPTION; 
</PRE> 
Затем Вы должны передать привилегию UPDATE в этой таблице для Adrian: 
<PRE> 
          GRANT UPDATE ON Londoncust TO Adrian; 
</PRE> 
В этом отличие привилегии для определенных строк от привилегии UPDATE 
для определенных столбцов, которая распространена на все столбцы таблицы 
Заказчиков, но не на строки, среди которых строки со значением пол city иным чем London не будут учитываться. Предложение WITH CHECK OPTION 
предохраняет Adrian от замены значения пол city на любое значение кроме 
London. 
 <B>ПРЕДОСТАВЛЕНИЕ ДОСТУПА ТОЛЬКО К ИЗВЛЕЧЕННЫМ ДАННЫМ</B> Друга возможность состоит в том, чтобы предлагать пользователям доступ 
к уже извлеченным данным, а не к фактическим значением в таблице. 
Агрегатные функции, могут быть весьма удобными в применении такого 
способа. Вы можете создавать представление которое дает счет, среднее, 
и общее количество для порядков на каждый день порядка: 
<PRE> 
         CREATE VIEW Datetotals 
            AS SELECT odate, COUNT (*), SUM (amt), AVG (amt) 
               FROM Orders 
               GROUP BY odate; 
</PRE> 
Теперь вы передаете пользователю Diane - привилегию SELECT в представлении Datetotals: 
<PRE> 
            GRANT SELECT ON Datetotals TO Diane; 
</PRE>
 <B>ИСПОЛЬЗОВАНИЕ ПРЕДСТАВЛЕНИЙ В КАЧЕСТВЕ АЛЬТЕРНАТИВЫ К ОГРАНИЧЕНИЯМ</B> 
Одной из последних прикладных программ из серии, описанной в <A href="ch18.shtml.htm" tppabs="http://www.sql.ru/docs/sql/u_sql/ch18.shtml">Главе 18</A>, 
является использование представлений с WITH CHECK OPTION как альтернативы к ограничениям. Предположим что вы хотели удостовериться, что 
все значения пол city в таблице Продавцов находятся в одном из городов 
где ваша компания в настоящее врем имеет ведомство. Вы можете установить ограничение CHECK непосредственно на столбец city, но позже может стать трудно его изменить, если ваша компания например откроет там 
другие ведомства. В качестве альтернативы, можно создать представление, 
которое исключает неправильные значения city: 
<PRE> 
   CREATE VIEW Curcities 
       AS SELECT * 
         FROM Salespeople 
           WHERE city IN ('London', 'Rome', 'San Jose', 'Berlin') 
          WITH CHECK OPTION; 
</PRE> 
Теперь, вместо того, чтобы предоставить пользователям привилегии модифицирования в таблице Продавцов, вы можете предоставить их в 
представлении Curcities. Преимущество такого подхода - в том, что если 
вам нужно сделать изменение, вы можете удалить это представление, 
создать новое, и предоставить в этом новом представлении привилегии 
пользователям, что проще чем изменять ограничения. Недостатком является то, что владелец таблицы Продавцов также должен использовать 
это представление если он не хочет чтобы его собственные команды бы- 
ли отклонены. 
С другой стороны, этот подход позволяет владельцу таблицы и любым 
другим получить привилегии модификации в самой таблице, а не в представлении, чтобы делать исключения для ограничений. 
<BR><BR> 
Это часто бывает желательно, но не выполнимо, если вы используете ограничения в базовой таблице. К сожалению, эти исключения нельзя будет увидеть в представлении. Если вы выберите этот подход, вам захочется создать второе представление, содержащее только исключения: 
<PRE> 
         CREATE VIEW Othercities 
           AS SELECT * 
             FROM Salespeople 
             WHERE city NOT IN ('London', 'Rome', 'San Jose', 
              'Berlin') 
             WITH CHECK OPTION; 
</PRE> 
Вы должны выбрать для передачи пользователям только привилегию SELECT 
в этом представлении, чтобы они могли видеть исключенные строки, но не 
могли помещать недопустимые значения city в базовую таблицу. Фактически, 
пользователи могли бы сделать запрос обоих представлений в объединении и 
увидеть все строки сразу. 
 <A name=22.10>
<H3>ДРУГИЕ ТИПЫ ПРИВИЛЕГИЙ</H3>Вы разумеется хотите знать, кто же имеет право первым создать таблицу. 
Эта область привилегии не относится к ANSI, но не может игнорировать- 
с. Все стандартные привилегии ANSI вытекают из этой привилегии; привилегии создателей таблиц которые могут передавать привилегии объекта. 
Если все ваши пользователи будут создавать в системе базовые таблицы 
с разными размерами это приведет к избыточности в них и к неэффективности системы. Притягивают к себе и другие вопросы: 
<BR><BR> 
- Кто имеет право изменять, удалять, или ограничивать таблицы? <BR><BR>
- Должны ли права создания базовых таблиц отличаться от прав 
    создания представлений? <BR><BR>
- Должен ли быть суперпользователь - пользователь который отвечает 
  за поддержание базы данных и следовательно имеющий наибольшие, 
  или все привилегии, которые не предоставляются индивидуально? 
<BR><BR> 
Пока ANSI не принимает в этом участие, а SQL используется в различных 
средах, мы не можем дать окончательный ответ на эти вопросы. Мы предлагаем рассмотреть здесь кусок наиболее общих выводов. 
<BR><BR> 
Привилегии которые не определяются в терминах специальных объектов 
данных называются - привилегиями системы, или правами базы данных. 
На базисном уровне, они будут вероятно включать в себя право создавать 
объекты данных, вероятно отличающиеся от базовых таблиц( обычно создаваемыми несколькими пользователями ) и представления ( обычно создаваемые большинством пользователей).     Привилегии системы для создания 
представлений, должны дополнять, а не заменять привилегии объекта которые ANSI  требует от создателей представлений ( описанных ранее в этой 
главе ). 
Кроме того, в системе любого размера всегда имеются некоторые типы суперпользователей - пользователей которые автоматически имеют большинство или все привилегии - и которые могут передать свой статус суперпользователя кому-нибудь с помощью привилегии или группы привилегий. Администратор Базы Данных, или DBA, является термином наиболее часто используемым для такого суперпользователя, и для привилегий которыми он 
обладает. 
 <A name=22.11>
<H3>ТИПИЧНЫЕ ПРИВИЛЕГИИ СИСТЕМЫ</H3>
При общем подходе имеется три базовых привилегии системы: 
<PRE>
      -   CONNECT  (Подключить), 
      -   RESOURCE (Ресурс), и 
      -   DBA      (Администратор Базы Данных). 
</PRE>
Проще, можно сказать, что CONNECT состоит из права зарегистрироваться и права создавать представления и синонимы(см. <A href="ch23.shtml.htm" tppabs="http://www.sql.ru/docs/sql/u_sql/ch23.shtml">Главу 23</A>), если переданы привилегии объекта. RESOURCE состоит из права создавать базовые таблицы. DBA - это привилегия суперпользователя, дающая пользователю высокие полномочи в базе данных. Один или более пользователей с функциями администратора базы данных может иметь эту привилегию. 
Некоторые системы кроме того имеют специального пользователя, иногда 
называемого SYSADM или SYS (Системный Администратор Базы Данных), 
который имеет наивысшие полномочи; это - специальное им, а не просто 
пользователь со специальной DBA привилегией. Фактически только один 
человек имеет право зарегистрироваться с именем SYSADM, являющимся 
его идентификатором доступа. Различие весьма тонкое и функционирует 
по разному в различных системах. Для наших целей, мы будем ссылаться 
на высокопривилегированного пользователя, который разрабатывает и управляет базой данных имея полномочи DBA, понимая что фактически эти 
полномочи - та же сама привилегия. Команда GRANT, в измененной форме, является пригодной для использования с привилегиями объекта как и с 
системными привилегиями. Для начала передача прав может быть сделана 
с помощью DBA. Например, DBA может передать привилегию для создания 
таблицы пользователю Rodriguez следующим образом: 
<PRE> 
         GRANT RESOURCE TO Rodriguez; 
</PRE> <A name=22.12>
<H3>СОЗДАНИЕ И УДАЛЕНИЕ ПОЛЬЗОВАТЕЛЕЙ</H3>Естественно появляется вопрос, откуда возьмется пользователь с именем 
Rodriguez ?  Как определить его ID допуска ? В большинстве реализаций, 
DBA создает пользователя, автоматически предоставляя  ему привилегию 
CONNECT. 
В этом случае, обычно добавляется предложение IDENTIFIED BY, указывающее пароль. ( Если же нет, операционна система должна определить, 
можете ли вы зарегистрироваться в базе данных с данным ID доступа. ) 
DBA может, например, ввести 
<PRE> 
GRANT CONNECT TO Thelonius IDENTIFIED BY Redwagon; 
</PRE> 
что приведет к созданию пользователя, с именем Thelonius, даст ему право регистрироваться, и назначит ему пароль Redwagon, и все это в одном 
предложении. 
 Раз Thelonious - уже опознанный пользователь, он или DBA могут использовать эту же команду чтобы изменить пароль Redwagon. 
Хотя это и удобно, но все же имеются ограничения и в этом подходе. Это 
невозможность иметь пользователя который не мог бы зарегистрировать- 
с, хотя бы временно. Если вы хотите запретить пользователю регистрироваться, вы должны использовать для REVOKE привилегию CONNECT, ко- 
тора "удаляет" этого пользователя. Некоторые реализации позволяют вам 
создавать и удалять пользователей, независимо от их привилегий при регистрации. 
Когда вы предоставляете привилегию CONNECT пользователю, вы создаете этого пользователя. При этом чтобы сделать это Вы сами, должны иметь 
DBA привилегию. Если этот пользователь будет создавать базовые таблицы 
( а не только представления ), ему нужно также предоставить привилегию 
RESOURCE. Но это сразу порождает другую проблему. 
  Если вы сделаете попытку удалить привилегию CONNECT пользователя, 
который имеет им созданные таблицы, команда будет отклонена, потому что 
ее действие оставит таблицу без владельца, а это не позволяется. 
Вы должны сначала удалить все таблицы созданные этим пользователем, 
прежде чем удалить его привилегию CONNECT . Если эти таблицы не пустые, то вы вероятно захотите передать их данные в  другие таблицы с по- 
мощью команды INSERT, которая использует запрос. Вам не нужно удалять 
отдельно привилегию RESOURSE; достаточно удалить CONNECT чтобы уда- 
лить пользователя. 
Хотя все выше сказанное - это вполне стандартный подход к привилегиям 
системы, он также имеет значительные ограничения. Появились альтернативные подходы, которые более конкретно определены и точнее управляют 
привилегиями системы. 
<BR><BR> 
Эти выводы несколько выводят нас за пределы стандарта SQL как это определено в настоящее врем, и, в некоторых реализациях, могут полностью выйти за пределы стандарта SQL. Эти вещи вероятно не будут слишком вас касаться, если вы не DBA или не пользователь высокого уровня. Обычные пользователи просто должны быть знакомыми с привилегиями системы в принципе, справляясь со своей документации только в случае специальных сообщений. 
 <A name=22.13>
<H3>РЕЗЮМЕ</H3> 
Привилегии дают вам возможность видеть SQL под новым углом зрения, когда SQL выполняет действия через специальных пользователей в специальной системе базы данных. Сама команда GRANT достаточно проста: с ее помощью, вы предоставляете те или иные привилегии объекта одному или более 
пользователям. Если вы предоставляете привилегию WITH GRANT OPTION 
пользователю, этот пользователь может в свою очередь предоставить эту 
привилегию другим. 
Теперь вы понимаете намеки на использование привилегий в представления- 
х - чтобы усовершенствовать привилегии в базовых таблицах, или как альтернативы к ограничениям - и на некоторые преимущества и недостатки та- 
кого подхода. Привилегии системы, которые необходимы, но не входят в область стандарта SQL, обсуждались в их наиболее общей форме и поэтому вы 
будете знакомиться с ними на практике. 
    <A href="ch23.shtml.htm" tppabs="http://www.sql.ru/docs/sql/u_sql/ch23.shtml">Глава 23</A> продолжит обсуждение о выводах в SQL, таких как сохранение 
или восстановление изменений, создание ваших собственных имен для таблиц  принадлежащих другим людям, и понимание что происходит когда различные пользователи пытаются обращаться к одному и тому же объекту одновременно. 
<A name=22.14>
<H3>РАБОТА С SQL</H3>1. Передайте Janet право на изменение оценки заказчика. 
<BR><BR> 
2. Передайте Stephan право передавать другим пользователям право 
   делать запросы в таблице Порядков. 
<BR><BR> 
3. Отнимите привилегию INSERT( ВСТАВКА) в таблице Продавцов 
   у Claire и у всех пользователей которым она была предоставлена. 
<BR><BR> 
4. Передайте Jerry право вставлять или модифицировать таблицу 
   Заказчиков с сохранением его возможности оценивать значения 
   в диапазоне от 100 до 500. 
<BR><BR> 
5. Разрешите Janet делать запросы в таблице Заказчиков, но запретите 
   ему уменьшать оценки в той же таблице Заказчиков. 
<BR><BR> 
( См. <A href="a.shtml.htm#23" tppabs="http://www.sql.ru/docs/sql/u_sql/a.shtml#23">Приложение A</A> для ответов. ) 
</TD></TR></TABLE>
</TD></TR>
<TR BGCOLOR=#6699CC><TD><TABLE WIDTH=100% BORDER=0 CELLSPACING=0 CELLPADDING=0><TR><TD BGCOLOR=#6699CC VALIGN=CENTER HEIGHT = 40><FONT SIZE=-10>
<!--begin of Top100 logo-->
<a href="javascript:if(confirm('http://top100.rambler.ru/top100/  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://top100.rambler.ru/top100/'" tppabs="http://top100.rambler.ru/top100/">
<img src="../../../../top100-images.rambler.ru/top100/banner-88x31-rambler-gray2.gif" tppabs="http://top100-images.rambler.ru/top100/banner-88x31-rambler-gray2.gif" alt="Rambler's Top100" width=88 height=31 border=0></a>
<!--end of Top100 logo -->
</FONT>
<!--Rating@Mail.ru COUNTER--><a target=_top
href="javascript:if(confirm('http://top.mail.ru/jump?from=58574  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://top.mail.ru/jump?from=58574'" tppabs="http://top.mail.ru/jump?from=58574"><img
src="../../../../top.list.ru/counter-id=58574;t=94.gif" tppabs="http://top.list.ru/counter?id=58574;t=94"
border=0 height=18 width=88
alt="Рейтинг@Mail.ru"></a><!--/COUNTER-->
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a style="font : bold 10px verdana; color : white" href="javascript:if(confirm('http://hosting.parking.ru/  \n\nThis file was not retrieved by Teleport Pro, because it is addressed on a domain or path outside the boundaries set for its Starting Address.  \n\nDo you want to open it from the server?'))window.location='http://hosting.parking.ru/'" tppabs="http://hosting.parking.ru/">Хостинг от компании Parking.ru</a>
<script src="../../../../www.google-analytics.com/urchin.js" tppabs="http://www.google-analytics.com/urchin.js" type="text/javascript">
</script>
<script type="text/javascript">
_uacct = "UA-265508-1";
urchinTracker();
</script>
</TD>
<TD BGCOLOR=#6699CC ALIGN=right><FONT COLOR=white FACE="Tahoma,Arial" SIZE=1>&nbsp;Administrator:&nbsp;<A STYLE="color :white" HREF="mailto:admin@sql.ru">admin@sql.ru</A>&nbsp;<BR>Last update: <FONT COLOR=white>05 июн 2007&nbsp;</FONT></FONT></TD></TR></TABLE>
</TD></TR></TABLE></TD></TR></TABLE>

</BODY></HTML>

