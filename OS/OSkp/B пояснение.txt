"B.c"
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <signal.h>

#include <unistd.h>
#include <sys/prctl.h>

#define BUFF_SIZE 256

int read_A;					// у B 2 фунции в pipes
int read_C;

void parent_death(int sig) {			// завершение с ошибкой
    exit(EXIT_FAILURE);
}

void parent_end(int sig) {			// успешное завершение 
    close(read_A);
    close(read_C);
    exit(EXIT_SUCCESS);
}

int main(int argc, char **argv) {
    pid_t parent_pid = atoi(argv[1]);		// считываем число со строки
    prctl(PR_SET_PDEATHSIG, SIGABRT);		//
    signal(SIGABRT, parent_death);		// реакция на SIGABRT
    if (getppid() != parent_pid) {		// если полученный PID не родительский - завершаем процесс с ошибкой
        parent_death(SIGABRT);
    }
    signal(SIGTERM, parent_end);		// реакция на SIGTERM

    read_A = atoi(argv[2]);			// перевод данных массива в целое число (парсинг)
    read_C = atoi(argv[3]);

    size_t from_A;
    size_t from_C;
    while (1) {						// (1) = если true
        read(read_A, &from_A, sizeof(size_t));		// B принимает размер строки от A
        printf("B got length %zu from A\n", from_A);	
        read(read_C, &from_C, sizeof(size_t));		// B принимает размер строки от C
        printf("B got length %zu from C\n", from_C);
    }

    return 0;
}